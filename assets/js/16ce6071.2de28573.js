"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[732],{7694:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var o=t(4848),s=t(8453);const i={sidebar_position:3},r="Ultron Extension",a={id:"common/extension",title:"Ultron Extension",description:"Ultron leverages the power of Kotlin extension functions.",source:"@site/docs/common/extension.md",sourceDirName:"common",slug:"/common/extension",permalink:"/ultron/docs/common/extension",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"UltronTest",permalink:"/ultron/docs/common/ultrontest"},next:{title:"Listeners",permalink:"/ultron/docs/common/listeners"}},c={},l=[{value:"Compose",id:"compose",level:2},{value:"Customize operation info",id:"customize-operation-info",level:3},{value:"Espresso",id:"espresso",level:2},{value:"Customize action info",id:"customize-action-info",level:3},{value:"Customize assertion info",id:"customize-assertion-info",level:3},{value:"Espresso Web",id:"espresso-web",level:2},{value:"UI Automator",id:"ui-automator",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"ultron-extension",children:"Ultron Extension"}),"\n",(0,o.jsxs)(n.p,{children:["Ultron leverages the power of ",(0,o.jsx)(n.a,{href:"https://kotlinlang.org/docs/extensions.html",children:"Kotlin extension functions"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"You can extend the framework by using its native approach along with your custom operations."}),"\n",(0,o.jsx)(n.h2,{id:"compose",children:"Compose"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:"To enhance the Compose part of the framework, follow these steps:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Create an extension method for ",(0,o.jsx)(n.code,{children:"UltronComposeSemanticsNodeInteraction"}),". This method should encapsulate the logic of the operation."]}),"\n",(0,o.jsxs)(n.li,{children:["Create ",(0,o.jsx)(n.code,{children:"SemanticsMatcher"})," extension method to invoke the method with the operation logic."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Two methods facilitate this process:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"perform"}),": This evaluates the operation and returns updated ",(0,o.jsx)(n.code,{children:"UltronComposeSemanticsNodeInteraction"})," object."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'fun UltronComposeSemanticsNodeInteraction.hasAnyChildren() = perform {\n    Assert.assertTrue("SemanticsNode has any children", it.fetchSemanticsNode().children.isNotEmpty())\n}\n\nfun SemanticsMatcher.hasAnyChildren() = UltronComposeSemanticsNodeInteraction(this).hasAnyChildren()\n'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"execute"}),": This evaluates the operation and returns the operation's result."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"fun UltronComposeSemanticsNodeInteraction.getWidth(): Int = execute {\n    it.fetchSemanticsNode().size.width\n}\n\nfun SemanticsMatcher.getWidth(): Int = UltronComposeSemanticsNodeInteraction(this).getWidth()\n"})}),"\n",(0,o.jsx)(n.h3,{id:"customize-operation-info",children:"Customize operation info"}),"\n",(0,o.jsxs)(n.p,{children:["You can provide additional information to the framework using ",(0,o.jsx)(n.code,{children:"UltronComposeOperationParams"})," for both the ",(0,o.jsx)(n.code,{children:"perform"})," and ",(0,o.jsx)(n.code,{children:"execute"})," methods."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"fun UltronComposeSemanticsNodeInteraction.getWidth(): Int = execute(\n    UltronComposeOperationParams(\n        operationName = \"Get width of '${semanticsNodeInteraction.getDescription()}'\",\n        operationDescription = \"Compose get width of '${semanticsNodeInteraction.getDescription()}' during $timeoutMs ms\",\n        operationType = CustomComposeOperationType.GET_WIDTH\n    )\n) {\n    it.fetchSemanticsNode().size.width\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"espresso",children:"Espresso"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.p,{children:["For Espresso operations, extend ",(0,o.jsx)(n.code,{children:"UltronEspressoInteraction"})," class. There are 3 methods that help us:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"perform"}),": This evaluates the action and returns an updated  ",(0,o.jsx)(n.code,{children:"UltronEspressoInteraction"})," object."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'fun <T> UltronEspressoInteraction<T>.appendText(value: String) = perform { _, view ->\n    val textView = (view as TextView)\n    textView.text = "${textView.text}$value"\n}\n'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"execute"}),": This evaluates the action and returns the result of the operation."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"fun <T> UltronEspressoInteraction<T>.getText(): String = execute { _, view ->\n    (view as TextView).text.toString()\n}\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"assertMatches"}),": This evaluates the assertion and returns an updated ",(0,o.jsx)(n.code,{children:"UltronEspressoInteraction"})," object."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"fun <T> UltronEspressoInteraction<T>.assertChecked(expectedState: Boolean) = assertMatches { view ->\n    // block returns Boolean defining whether assertion failed or succeded\n    (view as CheckBox).isChecked == expectedState\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To make your custom operation fully native, extend ",(0,o.jsx)(n.code,{children:"Matcher<View>"}),", ",(0,o.jsx)(n.code,{children:"ViewInteraction"}),", ",(0,o.jsx)(n.code,{children:"DataInteraction"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"//support action for all Matcher<View>\nfun Matcher<View>.appendText(text: String) = UltronEspressoInteraction(onView(this)).appendText(text)\n\n//support action for all ViewInteractions\nfun ViewInteraction.appendText(text: String) = UltronEspressoInteraction(this).appendText(text)\n\n//support action for all DataInteractions\nfun DataInteraction.appendText(text: String) =  UltronEspressoInteraction(this).appendText(text)\n"})}),"\n",(0,o.jsx)(n.p,{children:"You are able to use this custom operation"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'withId(R.id.text_input).appendText("some text to append")\n'})}),"\n",(0,o.jsx)(n.h3,{id:"customize-action-info",children:"Customize action info"}),"\n",(0,o.jsxs)(n.p,{children:["You can provide additional information to the framework using  ",(0,o.jsx)(n.code,{children:"UltronEspressoActionParams"})," for both the ",(0,o.jsx)(n.code,{children:"perform"})," and ",(0,o.jsx)(n.code,{children:"execute"})," methods."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"fun <T> UltronEspressoInteraction<T>.getText(): String = execute(\n    UltronEspressoActionParams(\n        operationName = \"GetText from TextView with '${getInteractionMatcher()}'\",\n        operationDescription = \"${interaction.simpleClassName()} action '${CustomEspressoActionType.GET_TEXT}' of '${getInteractionMatcher()}' with root '${getInteractionRootMatcher()}' during ${getActionTimeout()} ms\",\n        operationType = CustomEspressoActionType.GET_TEXT,\n        viewActionDescription = \"getting text from TextView\",\n        viewActionConstraints = isAssignableFrom(TextView::class.java)\n    )\n) { _, view ->\n    (view as TextView).text.toString()\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"customize-assertion-info",children:"Customize assertion info"}),"\n",(0,o.jsxs)(n.p,{children:["You can provide additional information to the framework using  ",(0,o.jsx)(n.code,{children:"UltronEspressoAssertionParams"})," for the ",(0,o.jsx)(n.code,{children:"assertChecked"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"fun <T> UltronEspressoInteraction<T>.assertChecked(expectedState: Boolean) = assertMatches (\n    UltronEspressoAssertionParams(\n        operationName = \"Assert CheckBox isChecked = '$expectedState'\",\n        operationDescription = \"Assert CheckBox isChecked = '$expectedState' during $timeoutMs ms\",\n        operationType = EspressoAssertionType.IS_CHECKED,\n    )\n){ view ->\n    (view as CheckBox).isChecked == expectedState\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"espresso-web",children:"Espresso Web"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.p,{children:["For Espresso Web operations, extend the ",(0,o.jsx)(n.code,{children:"UltronWebElement"})," class."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"// add action on wenView\nfun UltronWebElement.appendText(text: String) = apply {\n        executeOperation(\n            getUltronWebActionOperation (\n                webInteractionBlock = {\n                    webInteractionBlock().perform(DriverAtoms.webKeys(text))\n                },\n                name = \"WebElement(${locator.type} = '$value') appendText '$text'\",\n                description = \"WebElement(${locator.type} = '$value') appendText '$text' during $timeoutMs ms\"\n            )\n        )\n    }\n"})}),"\n",(0,o.jsx)(n.p,{children:"Use it like"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'id("text_input").appendText("some text")\n'})}),"\n",(0,o.jsxs)(n.p,{children:["In case you need to add an assertion, use ",(0,o.jsx)(n.code,{children:"getUltronWebAssertionOperation()"})," instead of ",(0,o.jsx)(n.code,{children:"getUltronWebActionOperation()"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"// add assertion on webView\nfun UltronWebElement.appendText(text: String) = apply {\n        executeOperation(\n            getUltronWebAssertionOperation (...)\n        )\n    }\n"})}),"\n",(0,o.jsx)(n.h2,{id:"ui-automator",children:"UI Automator"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.p,{children:["For UI Automator operations, extend either ",(0,o.jsx)(n.code,{children:"UltronUiObject2"})," or ",(0,o.jsx)(n.code,{children:"UltronUiObject"})," class."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"//actually, UltronUiObject2 already has the same method addText\n// this is just an example of how to extend UltronUiObject2\nfun UltronUiObject2.appendText(appendText: String) = apply {\n        executeAction(\n            actionBlock = { uiObject2ProviderBlock()!!.text += appendText },\n            name = \"AppendText '$appendText' to $selectorDesc\",\n            description = \"UiObject2 action '${UiAutomatorActionType.ADD_TEXT}' $selectorDesc appendText '$appendText' during $timeoutMs ms\"\n        )\n    }\n"})}),"\n",(0,o.jsx)(n.p,{children:"Use this new ability like:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"object SomePage : Page<SomePage>() {\n    private val search = byResId(R.id.search)  \n    fun someUserStep(prefixText: String){\n         search.addPrefixText(prefix)\n    }\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"The same approach applies to adding custom assertions:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'// actually it is not required to create custom  UltronOperationType, but could be useful later\nenum class CustomUltronOperations : UltronOperationType {\n    ASSERT_HAS_ANY_CHILD\n}\n// add extension function to UltronUiObject2 that calls `executeAssertion`\nfun UltronUiObject2.assertHasAnyChild() = apply {\n    executeAssertion(\n        assertionBlock = { uiObject2ProviderBlock()!!.childCount > 0 },\n        name = "Assert $selectorDesc has any child",\n        type = CustomUltronOperations.ASSERT_HAS_ANY_CHILD,\n        description = "UiObject2 assertion \'${CustomUltronOperations.ASSERT_HAS_ANY_CHILD}\' of $selectorDesc during $timeoutMs ms"\n    )\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Use this new ability like:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"object SomePage : Page<SomePage>() {\n    private val searchResult = byResId(R.id.search_result)\n    fun someUserStep(prefixText: String){\n        search.addPrefixText(prefix)\n        searchResult.assertHasAnyChild()\n    }\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(6540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);