"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[178],{8942:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=t(4848),s=t(8453);const i={sidebar_position:1},r="Espresso",a={id:"android/espress",title:"Espresso",description:"How to use?",source:"@site/docs/android/espress.md",sourceDirName:"android",slug:"/android/espress",permalink:"/ultron/docs/android/espress",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"LazyList",permalink:"/ultron/docs/compose/lazylist"},next:{title:"WebView",permalink:"/ultron/docs/android/webview"}},l={},c=[{value:"How to use?",id:"how-to-use",level:2},{value:"Best practice",id:"best-practice",level:2},{value:"Custom timeout for any operation",id:"custom-timeout-for-any-operation",level:2},{value:"Boolean operation result",id:"boolean-operation-result",level:2},{value:"Dialog and popup",id:"dialog-and-popup",level:2},{value:"Extend framework with your own ViewActions and ViewAssertions",id:"extend-framework-with-your-own-viewactions-and-viewassertions",level:2},{value:"Get any property of any View",id:"get-any-property-of-any-view",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"espresso",children:"Espresso"}),"\n",(0,o.jsx)(n.h2,{id:"how-to-use",children:"How to use?"}),"\n",(0,o.jsx)(n.p,{children:"Simple espresso operation looks like this"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"onView(withId(R.id.send_button)).check(isDisplayed()).perform(click())\n"})}),"\n",(0,o.jsxs)(n.p,{children:["the same with ",(0,o.jsx)(n.strong,{children:"Ultron"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"withId(R.id.send_button).isDisplayed().click()\n"})}),"\n",(0,o.jsx)(n.p,{children:"Names of all Ultron operations are the same as espresso one. There are a lot of additional operations those simplifies test development."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'//------ actions ------ \nclick()\ndoubleClick()\nlongClick()\ntypeText(text: String)\nreplaceText(text: String)\nclearText()\npressKey(keyCode: Int)\npressKey(key: EspressoKey)\ncloseSoftKeyboard()\nswipeLeft()\nswipeRight()\nswipeUp()\nswipeDown()\nscrollTo()\nperform(viewAction: ViewAction)          // execute custom espresso action as Ultron one\nperform(params: UltronEspressoActionParams? = null, block: (uiController: UiController, view: View) -> Unit)\n<T> execute(params: UltronEspressoActionParams? = null, block: (uiController: UiController, view: View) -> T): T\n\n//------ get View property actions ------ \ngetText() : String?\ngetContentDescription() : String?\ngetDrawable() : Drawable?\n\n//------ assertions ------ \nexists()\ndoesNotExist()\nisDisplayed()\nisNotDisplayed()\nisCompletelyDisplayed()\nisDisplayingAtLeast(percentage: Int)\ndoesNotExist()\nisEnabled()\nisNotEnabled()\nisSelected()\nisNotSelected()\nisClickable()\nisNotClickable()\nisChecked()\nisNotChecked()\nisFocusable()\nisNotFocusable()\nhasFocus()\nisJavascriptEnabled()\nhasText(text: String) \nhasText(resourceId: Int)\nhasText(stringMatcher: Matcher<String>)\ntextContains(text: String)\nhasContentDescription(text: String)\nhasContentDescription(resourceId: Int)\nhasContentDescription(charSequenceMatcher: Matcher<CharSequence>) \ncontentDescriptionContains(text: String)\nassertMatches(condition: Matcher<View>) // execute custom espresso assertion as Ultron one\nhasDrawable(@DrawableRes resourceId: Int)\nhasAnyDrawable()\nhasCurrentTextColor(@ColorRes colorRes: Int)\nhasCurrentHintTextColor(@ColorRes colorRes: Int)\nhasShadowColor(@ColorRes colorRes: Int)\nhasHighlightColor(@ColorRes colorRes: Int)\nassertMatches(params: UltronEspressoAssertionParams? = null, block: (view: View) -> Boolean)\n//------ general ------ \nwithTimeout(timeoutMs: Long)                     // set custom timeout for operations\nwithResultHandler(resultHandlerBlock)            // set custom result handler and process operation result \nwithAssertion(assertion: OperationAssertion)     // define custom assertion of action success\nwithAssertion(name: String = "", isListened: Boolean = false, block: () -> Unit)\n\n//------ custom clicks ------\nclickTopLeft(offsetX: Int, offsetY: Int)\nclickTopCenter(offsetY: Int)\nclickTopRight(offsetX: Int, offsetY: Int)\nclickCenterRight(offsetX: Int)\nclickBottomRight(offsetX: Int, offsetY: Int)\nclickBottomCenter(offsetY: Int)\nclickBottomLeft(offsetX: Int, offsetY: Int)\nclickCenterLeft(offsetX: Int)\n\n'})}),"\n",(0,o.jsx)(n.h2,{id:"best-practice",children:"Best practice"}),"\n",(0,o.jsx)(n.p,{children:"Specify page elements as properties of PageObject class."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"object SomePage : Page<SomePage>() {\n    private val button = withId(R.id.button1)\n    private val eventStatus = withId(R.id.last_event_status)\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Use this properties in page steps"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"object SomePage : Page<SomePage>() {\n    //page elements\n    fun someUserStepOnPage(expectedEventText: String){\n         button.click()\n         eventStatus.hasText(expectedEventText)\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"custom-timeout-for-any-operation",children:"Custom timeout for any operation"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"withId(R.id.last_event_status).withTimeout(10_000).isDisplayed()\n"})}),"\n",(0,o.jsx)(n.p,{children:"There are 2 ways of using custom timeout:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Specify it for page property and it will be applied for all operations with this element"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"object SomePage : Page<SomePage>() {\n    private val eventStatus = withId(R.id.last_event_status).withTimeout(10_000)\n}\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Specify it inside special step there the element operation could take more time. This timeout value will be applied only once for single operation."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"object SomePage : Page<SomePage>() {\n    fun someLongUserStep(expectedEventText: String){\n         longRequestButton.click()\n         eventStatus.withTimeout(20_000).hasText(expectedEventText)\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"boolean-operation-result",children:"Boolean operation result"}),"\n",(0,o.jsxs)(n.p,{children:["There is ",(0,o.jsx)(n.code,{children:"isSuccess"})," method that allows us to get the result of any operation as boolean value. In case of false it could be executed to long (5 sec by default). So it reasonable to specify custom timeout for some operations."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"val isButtonDisplayed = withId(R.id.button).isSuccess { withTimeout(2_000).isDisplayed() }\nif (isButtonDisplayed) {\n    //do some reasonable actions\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"dialog-and-popup",children:"Dialog and popup"}),"\n",(0,o.jsx)(n.p,{children:"To execute any operation inside dialog or popup with espresso you have to specify correct root element"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'onView(withText("OK"))).inRoot(isDialog()).perform(click())\nonView(withText("Cancel")).inRoot(isPlatformPopup()).perform(click())\n'})}),"\n",(0,o.jsx)(n.p,{children:"Here is a point we need to put our minds on."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.strong,{children:["Ultron extends not only ",(0,o.jsx)(n.code,{children:"Matcher<View>"})," object but also ",(0,o.jsx)(n.code,{children:"ViewInteraction"})," and ",(0,o.jsx)(n.code,{children:"DataInteraction"})," objects"]})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:'onView(withText("OK"))).inRoot(isDialog())'})," returns ",(0,o.jsx)(n.em,{children:"ViewInteraction"}),". Therefore it's possible to use Ultron operations with dialogs."]}),"\n",(0,o.jsx)(n.p,{children:"So the best way would be a following"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"object DialogPage : Page<DialogPage>() {\n    val okButton = onView(withText(R.string.ok_button))).inRoot(isDialog())\n    val cancelButton = onView(withText(R.string.cancel_button))).inRoot(isDialog())\n}\n...\nfun someUserStepInsideSomePage(){\n    DialogPage.okButton.click()\n    somePageElement.isDisplayed()\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"extend-framework-with-your-own-viewactions-and-viewassertions",children:"Extend framework with your own ViewActions and ViewAssertions"}),"\n",(0,o.jsxs)(n.p,{children:["Under the hood all espresso Ultron operations are described in ",(0,o.jsx)(n.code,{children:"UltronEspressoInteraction"})," class. That is why you just need to extend this class using ",(0,o.jsx)(n.a,{href:"https://kotlinlang.org/docs/extensions.html",children:"kotlin extension function"}),", e.g."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'fun <T> UltronEspressoInteraction<T>.appendText(text: String) = apply {\n    executeAction(\n        operationBlock = getInteractionActionBlock(AppendTextAction(text)),\n        name = "Append text \'$text\' to ${getInteractionMatcher()}",\n        description = "${interaction!!::class.simpleName} APPEND_TEXT to ${getInteractionMatcher()} during $timeoutMs ms",\n    )\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"AppendTextAction"})," is a custom ViewAction, smth like that"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'class AppendTextAction(private val value: String) : ViewAction {\n    override fun getConstraints() = allOf(isDisplayed(), isAssignableFrom(TextView::class.java))\n    override fun perform(uiController: UiController, view: View) {\n        (view as TextView).apply {\n            this.text = "$text$value"\n        }\n        uiController.loopMainThreadUntilIdle()\n    }\n    ...\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"To make your custom operation 100% native for Ultron framework it's required to add 3 lines more"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"//support action for all Matcher<View>\nfun Matcher<View>.appendText(text: String) = UltronEspressoInteraction(onView(this)).appendText(text)\n\n//support action for all ViewInteractions\nfun ViewInteraction.appendText(text: String) = UltronEspressoInteraction(this).appendText(text)\n\n//support action for all DataInteractions\nfun DataInteraction.appendText(text: String) =  UltronEspressoInteraction(this).appendText(text)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Finally you are able to use this custom operation"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'withId(R.id.text_input).appendText("some text to append")\n'})}),"\n",(0,o.jsxs)(n.p,{children:["View sample code ",(0,o.jsx)(n.a,{href:"https://github.com/open-tool/ultron/blob/master/sample-app/src/androidTest/java/com/atiurin/sampleapp/framework/ultronext/UltronEspressoExt.kt",children:"UltronEspressoExt"})]}),"\n",(0,o.jsx)(n.h2,{id:"get-any-property-of-any-view",children:"Get any property of any View"}),"\n",(0,o.jsxs)(n.p,{children:["There are several build in methods that extends ",(0,o.jsx)(n.code,{children:"Matcher<View>, ViewInteraction, DataInteraction"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"getText() : String?\ngetContentDescription() : String?\ngetDrawable() : Drawable?\n"})}),"\n",(0,o.jsxs)(n.p,{children:["And you are able to get any other property. There is an example how it could be done - ",(0,o.jsx)(n.a,{href:"https://github.com/alex-tiurin/ultron/blob/master/ultron/src/main/java/com/atiurin/ultron/custom/espresso/action/GetTextAction.kt",children:"GetTextAction"})]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(6540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);